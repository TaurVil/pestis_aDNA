##  Vilgalys pestis aDNA pipeline

## Remap reads to the full human genome, using bam2bam mapping from network-aware-bwa
samtools sort -n bams/$SAMPLE*min24*.bam -o $SAMPLE.sortname.bam
/project2/lbarreiro/users/tauras/Programs/bwa_bam2bam/network-aware-bwa-master/bwa bam2bam -g hg19/hg19.fa -l 16500 -f bams/$SAMPLE.mapped.bam $SAMPLE.sortname.bam
samtools sort -o bams/$SAMPLE.sort.bam bams/$SAMPLE.mapped.bam; samtools index bams/$SAMPLE.sort.bam
rm $SAMPLE.sortname.bam; rm bams/$SAMPLE.mapped.bam
samtools flagstat bams/$SAMPLE.sort.bam

## Rescale bam file using mapDamage
mapDamage -i $SAMPLE.sort.bam -r ../hg19/hg19.fa

## Trim 4 bases, which include most damage (this doesn't actually have a big effect on the results)
/project2/lbarreiro/users/tauras/Programs/bamUtil/bam trimBam mapDamage_bams/$SAMPLE.sort.rescaled.bam bams_mapDamage_trim4/$SAMPLE.bam -L 4 -R 4

## Create gVCF file using the bams outputted by mapDamage 
/project2/lbarreiro/users/tauras/Programs/gatk-4.1.4.1/gatk HaplotypeCaller -ERC GVCF -I bams_mapDamage_trim4//$SAMPLE.bam  -R hg19/hg19.fa  -O gVCF_clipped/$SAMPLE.g.vcf.gz -mbq 20

## Combine gVCF files for each region we sequenced 
/project2/lbarreiro/users/tauras/Programs/gatk-4.1.4.1/gatk CombineGVCFs -R hg19/hg19.fa -O $CHROMOSOME.exon.g.vcf.gz -V 01_exon_gvcf.list -L $CHROMOSOME
/project2/lbarreiro/users/tauras/Programs/gatk-4.1.4.1/gatk GenotypeGVCFs -V $CHROMOSOME.exon.g.vcf.gz -R hg19/hg19.fa -O $CHROMOSOME.exon.vcf.gz 

## Combine chromosomes, quality filter, rename samples
bcftools concat chr*neutral.vcf.gz -a > neutral.vcf.gz
vcftools --gzvcf neutral.vcf.gz --mac 3 --max-alleles 2 --bed ../neutral.bed --minQ 30 --recode --out neutral_mac3_biallelic
sed -i 's/_Immune//g' immune_mac3_biallelic.recode.vcf

## Get genotype likelihoods, done separately for each time point and population 
bcftools annotate -x ^INFO/DP,^FORMAT/GT,^FORMAT/AD,^FORMAT/DP,^FORMAT/GQ,^FORMAT/PL immune_mac3_biallelic.recode.vcf | bcftools +setGT -- -ta -nu > joint.immune.forgenolik.vcf
vcftools --vcf joint.exon.forgenolik.vcf --keep 05.pre_exon_london.txt --recode --out temp; vcftools --vcf temp.recode.vcf --012 --out london_pre_exons
	sed '/^#/d' temp.recode.vcf | cut -f 1,2,10- | sed -e 's/:/ /g' | sed -e 's/\./999/g' | /project2/lbarreiro/users/tauras/Programs/LCLAE/filtbaboon1b NUMBER_INDIVIDUALS > genolik.exons_london_pre.genolik
vcftools --vcf joint.exon.forgenolik.vcf --keep 05.post_exon_london.txt --recode --out temp; vcftools --vcf temp.recode.vcf --012 --out london_post_exons
	sed '/^#/d' temp.recode.vcf | cut -f 1,2,10- | sed -e 's/:/ /g' | sed -e 's/\./999/g' | /project2/lbarreiro/users/tauras/Programs/LCLAE/filtbaboon1b NUMBER_INDIVIDUALS > genolik.exons_london_post.genolik
vcftools --vcf joint.exon.forgenolik.vcf --keep 05.BD_exon_london.txt --recode --out temp; vcftools --vcf temp.recode.vcf --012 --out london_during_exons
	sed '/^#/d' temp.recode.vcf | cut -f 1,2,10- | sed -e 's/:/ /g' | sed -e 's/\./999/g' | /project2/lbarreiro/users/tauras/Programs/LCLAE/filtbaboon1b NUMBER_INDIVIDUALS > genolik.exons_london_during.genolik
	

## Now we switch from bash to R 

######## 
# Get study design matrix and R packages
######## 
library(data.table)
# Create design matrix for which we'll pull in data
design <- expand.grid(time = gl(3, 1, labels = c("pre", "post", "during")), pop = gl(2, 1, labels = c("denmark", "london")))
                      #type = gl(3, 1, labels = c("exons", "gwas", "neutral"))
design2 <- expand.grid(time1 = gl(3, 1, labels = c("pre", "post", "during")), time2 = gl(3, 1, labels = c("pre", "post", "during")), pop = gl(2, 1, labels = c("denmark", "london")))
design2<-subset(design2, !(design2$time1 == design2$time2)); design2 <- design2[c(1:2,4,7:8,10),]
########

######## 
# Get trimmed aDNA frequencies
######## 
# Info files with the number and alternate allele freq in each population
# mac >= 3; biallelic; minQ >= 30
# Subset for sites within the targetted regions of the genome 
######## 
## Read in information for each variatint including the chromosome and position  
info_gwas <- fread("~/Barreiro/pestis_aDNA/for_processing/trim4bp/info.immune.frq")
info_neut <- fread("~/Barreiro/pestis_aDNA/for_processing/trim4bp/info.neutral.frq")
info_exon <- fread("~/Barreiro/pestis_aDNA/for_processing/trim4bp/info.exon.frq")
## For each population and time point, calculate the allele frequency using the weighted genotype likelihoods 
for (i in c(4:nrow(design),1:3)) {
  ## Read in data for that population and time 
  name=paste("~/Barreiro/pestis_aDNA/for_processing/trim4bp/genolik.exons_",design$pop[i],"_", design$time[i],".genolik",sep="")
  n2=paste(design$pop[i],design$time[i],sep="_")
  d <- as.data.frame(fread(name))
  if (i == 4) {paste(d[,1],d[,2],sep="_") -> info_exon$site; d[,1] -> info_exon$chr; d[,2] -> info_exon$pos}
  d <- d[,-(1:2)] ; d[d == -1] <- NA; n <- ncol(d)/3
  info_exon[[paste(n2,"alternate",sep=".")]] <- rowMeans(d[,seq(3,ncol(d),3)],na.rm=T) + rowMeans(d[,seq(2,ncol(d),3)],na.rm=T)/2
  info_exon[[paste(n2,"called",sep=".")]] <- (ncol(d)-rowSums(is.na(d)))/3
  info_exon[[paste(n2,"possible",sep=".")]] <- (ncol(d))/3
  
  name=paste("~/Barreiro/pestis_aDNA/for_processing/trim4bp/genolik.gwas_",design$pop[i],"_", design$time[i],".genolik",sep="")
  n2=paste(design$pop[i],design$time[i],sep="_")
  d <- as.data.frame(fread(name))
  if (i == 4) {paste(d[,1],d[,2],sep="_") -> info_gwas$site; d[,1] -> info_gwas$chr; d[,2] -> info_gwas$pos}
  d <- d[,-(1:2)] ; d[d == -1] <- NA; n <- ncol(d)/3
  info_gwas[[paste(n2,"alternate",sep=".")]] <- rowMeans(d[,seq(3,ncol(d),3)],na.rm=T) + rowMeans(d[,seq(2,ncol(d),3)],na.rm=T)/2
  info_gwas[[paste(n2,"called",sep=".")]] <- (ncol(d)-rowSums(is.na(d)))/3
  info_gwas[[paste(n2,"possible",sep=".")]] <- (ncol(d))/3
  
  name=paste("~/Barreiro/pestis_aDNA/for_processing/trim4bp/genolik.neutral_",design$pop[i],"_", design$time[i],".genolik",sep="")
  n2=paste(design$pop[i],design$time[i],sep="_")
  d <- as.data.frame(fread(name))
  if (i == 4) {paste(d[,1],d[,2],sep="_") -> info_neut$site; d[,1] -> info_neut$chr; d[,2] -> info_neut$pos}
  d <- d[,-(1:2)] ; d[d == -1] <- NA; n <- ncol(d)/3
  info_neut[[paste(n2,"alternate",sep=".")]] <- rowMeans(d[,seq(3,ncol(d),3)],na.rm=T) + rowMeans(d[,seq(2,ncol(d),3)],na.rm=T)/2
  info_neut[[paste(n2,"called",sep=".")]] <- (ncol(d)-rowSums(is.na(d)))/3
  info_neut[[paste(n2,"possible",sep=".")]] <- (ncol(d))/3
}; rm(d,i,name,n2)
########
# Calculate Fst
########
## for each pairwise comparison between populations we care about (i.e. within London or Denmark)
## calculate expected heterozygosity per population 
for (i in 1:nrow(design)) {
  n2=paste(design$pop[i],design$time[i],sep="_")
  # expected heterozygosity
  info_gwas[[paste(n2,"ehet",sep=".")]] <- 2*info_gwas[[paste(n2,"alternate",sep=".")]]*(1-info_gwas[[paste(n2,"alternate",sep=".")]])
  info_exon[[paste(n2,"ehet",sep=".")]] <- 2*info_exon[[paste(n2,"alternate",sep=".")]]*(1-info_exon[[paste(n2,"alternate",sep=".")]])
  info_neut[[paste(n2,"ehet",sep=".")]] <- 2*info_neut[[paste(n2,"alternate",sep=".")]]*(1-info_neut[[paste(n2,"alternate",sep=".")]])
  
}
# pairwise means, pairwise expectations, and Fst
for (i in 1:nrow(design2)) {
  n2=paste(design2$pop[i],design2$time1[i],design2$time2[i],sep="_")
  
  ## Calculate mean allele frequency for the 2 populations (just the average of the two, so having a larger sample isn't weighted more)
  info_gwas[[paste(n2,"mean",sep=".")]] <- rowMeans(cbind(info_gwas[[paste(design2$pop[i],"_",design2$time1[i],".alternate",sep="")]], info_gwas[[paste(design2$pop[i],"_",design2$time2[i],".alternate",sep="")]]))
  ## Calculate expected heterozygosity following hardy-weinberg equilibrium
  info_gwas[[paste(n2,"ehet",sep=".")]] <- 2*info_gwas[[paste(n2,"mean",sep=".")]]*(1-info_gwas[[paste(n2,"mean",sep=".")]])
  ## calculate fst as (expected heterozygosity of a panmictic population - mean expected heterozygosity in sub-populations)/expected heterozygosity of the panmictic population (Wright 1950)
  info_gwas[[paste(n2,"fst",sep=".")]] <- (info_gwas[[paste(n2,"ehet",sep=".")]] - (info_gwas[[paste(design2$pop[i],"_",design2$time1[i],".ehet",sep="")]] + info_gwas[[paste(design2$pop[i],"_",design2$time2[i],".ehet",sep="")]])/2)/info_gwas[[paste(n2,"ehet",sep=".")]]
  
  info_exon[[paste(n2,"mean",sep=".")]] <- rowMeans(cbind(info_exon[[paste(design2$pop[i],"_",design2$time1[i],".alternate",sep="")]], info_exon[[paste(design2$pop[i],"_",design2$time2[i],".alternate",sep="")]]))
  info_exon[[paste(n2,"ehet",sep=".")]] <- 2*info_exon[[paste(n2,"mean",sep=".")]]*(1-info_exon[[paste(n2,"mean",sep=".")]])
  info_exon[[paste(n2,"fst",sep=".")]] <- (info_exon[[paste(n2,"ehet",sep=".")]] - (info_exon[[paste(design2$pop[i],"_",design2$time1[i],".ehet",sep="")]] + info_exon[[paste(design2$pop[i],"_",design2$time2[i],".ehet",sep="")]])/2)/info_exon[[paste(n2,"ehet",sep=".")]]
  
  info_neut[[paste(n2,"mean",sep=".")]] <- rowMeans(cbind(info_neut[[paste(design2$pop[i],"_",design2$time1[i],".alternate",sep="")]], info_neut[[paste(design2$pop[i],"_",design2$time2[i],".alternate",sep="")]]))
  info_neut[[paste(n2,"ehet",sep=".")]] <- 2*info_neut[[paste(n2,"mean",sep=".")]]*(1-info_neut[[paste(n2,"mean",sep=".")]])
  info_neut[[paste(n2,"fst",sep=".")]] <- (info_neut[[paste(n2,"ehet",sep=".")]] - (info_neut[[paste(design2$pop[i],"_",design2$time1[i],".ehet",sep="")]] + info_neut[[paste(design2$pop[i],"_",design2$time2[i],".ehet",sep="")]])/2)/info_neut[[paste(n2,"ehet",sep=".")]]
  
}
rm(i,n2,n)
info_gwas -> info_gwas_trim; rm(info_gwas)
info_neut -> info_neut_trim; rm(info_neut)
info_exon -> info_exon_trim; rm(info_exon)
########
